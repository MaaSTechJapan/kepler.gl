"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = BottomWidgetFactory;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _timeWidget = _interopRequireDefault(require("./filters/time-widget"));

var _animationControl = _interopRequireDefault(require("./common/animation-control/animation-control"));

var _defaultSettings = require("../constants/default-settings");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  padding-top: ", "px;\n  padding-right: ", "px;\n  padding-bottom: ", "px;\n  padding-left: ", "px;\n  width: ", "px;\n  bottom: 0;\n  right: 0;\n  z-index: 1;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var propTypes = {
  filters: _propTypes["default"].arrayOf(_propTypes["default"].object),
  datasets: _propTypes["default"].object,
  uiState: _propTypes["default"].object,
  layers: _propTypes["default"].arrayOf(_propTypes["default"].object),
  animationConfig: _propTypes["default"].object,
  visStateActions: _propTypes["default"].object,
  sidePanelWidth: _propTypes["default"].number,
  containerW: _propTypes["default"].number
};
var maxWidth = 1080;
BottomWidgetFactory.deps = [_timeWidget["default"], _animationControl["default"]];

var BottomWidgetContainer = _styledComponents["default"].div(_templateObject(), function (props) {
  return props.theme.sidePanel.margin.top;
}, function (props) {
  return props.theme.sidePanel.margin.right;
}, function (props) {
  return props.theme.sidePanel.margin.bottom;
}, function (props) {
  return props.theme.sidePanel.margin.left;
}, function (props) {
  return props.width;
});

function BottomWidgetFactory(TimeWidget, AnimationControl) {
  var BottomWidget = function BottomWidget(props) {
    var datasets = props.datasets,
        filters = props.filters,
        animationConfig = props.animationConfig,
        visStateActions = props.visStateActions,
        containerW = props.containerW,
        uiState = props.uiState,
        sidePanelWidth = props.sidePanelWidth,
        layers = props.layers;
    var activeSidePanel = uiState.activeSidePanel,
        readOnly = uiState.readOnly;
    var isOpen = Boolean(activeSidePanel);
    var enlargedFilterIdx = filters.findIndex(function (f) {
      return f.enlarged && f.type === _defaultSettings.FILTER_TYPES.timeRange;
    });
    var isAnyFilterAnimating = filters.some(function (f) {
      return f.isAnimating;
    });
    var enlargedFilterWidth = isOpen ? containerW - sidePanelWidth : containerW; // show playback control if layers contain trip layer & at least one trip layer is visible

    var animatedLayer = layers.filter(function (l) {
      return l.config.animation && l.config.animation.enabled && l.config.isVisible;
    });
    var readToAnimation = Array.isArray(animationConfig.domain) && animationConfig.currentTime; // if animation control is showing, hide time display in time slider

    var showFloatingTimeDisplay = !animatedLayer.length;
    return /*#__PURE__*/_react["default"].createElement(BottomWidgetContainer, {
      width: Math.min(maxWidth, enlargedFilterWidth),
      className: "bottom-widget--container"
    }, animatedLayer.length && readToAnimation ? /*#__PURE__*/_react["default"].createElement(AnimationControl, {
      animationConfig: animationConfig,
      updateAnimationTime: visStateActions.updateAnimationTime,
      updateAnimationSpeed: visStateActions.updateLayerAnimationSpeed
    }) : null, enlargedFilterIdx > -1 && Object.keys(datasets).length > 0 ? /*#__PURE__*/_react["default"].createElement(TimeWidget, {
      filter: filters[enlargedFilterIdx],
      index: enlargedFilterIdx,
      isAnyFilterAnimating: isAnyFilterAnimating,
      datasets: datasets,
      readOnly: readOnly,
      showTimeDisplay: showFloatingTimeDisplay,
      setFilterPlot: visStateActions.setFilterPlot,
      setFilter: visStateActions.setFilter,
      toggleAnimation: visStateActions.toggleFilterAnimation,
      updateAnimationSpeed: visStateActions.updateFilterAnimationSpeed,
      enlargeFilter: visStateActions.enlargeFilter
    }) : null);
  };

  BottomWidget.propTypes = propTypes;
  return BottomWidget;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,