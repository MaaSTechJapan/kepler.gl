"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = require("../../common/styled-components");

var _filterPanelHeader = _interopRequireDefault(require("../../side-panel/filter-panel/filter-panel-header"));

var _fieldSelector = _interopRequireDefault(require("../../common/field-selector"));

var _sourceDataSelector = _interopRequireDefault(require("../../side-panel/common/source-data-selector"));

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
NewFilterPanelFactory.deps = [_filterPanelHeader["default"], _sourceDataSelector["default"]];

function NewFilterPanelFactory(FilterPanelHeader, SourceDataSelector) {
  var NewFilterPanel = _react["default"].memo(function (_ref) {
    var idx = _ref.idx,
        filter = _ref.filter,
        datasets = _ref.datasets,
        allAvailableFields = _ref.allAvailableFields,
        setFilter = _ref.setFilter,
        removeFilter = _ref.removeFilter,
        enlargeFilter = _ref.enlargeFilter;
    var onFieldSelector = (0, _react.useCallback)(function (field) {
      return setFilter(idx, 'name', field.name);
    }, [idx, setFilter]);
    var onSourceDataSelector = (0, _react.useCallback)(function (value) {
      return setFilter(idx, 'dataId', value);
    }, [idx, setFilter]);
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(FilterPanelHeader, {
      datasets: [datasets[filter.dataId[0]]],
      allAvailableFields: allAvailableFields,
      idx: idx,
      filter: filter,
      removeFilter: removeFilter,
      enlargeFilter: enlargeFilter,
      enlarged: filter.enlarged
    }, /*#__PURE__*/_react["default"].createElement(_fieldSelector["default"], {
      inputTheme: "secondary",
      fields: allAvailableFields,
      value: Array.isArray(filter.name) ? filter.name[0] : filter.name,
      erasable: false,
      onSelect: onFieldSelector
    })), /*#__PURE__*/_react["default"].createElement(_styledComponents.StyledFilterContent, {
      className: "filter-panel__content"
    }, Object.keys(datasets).length > 1 && /*#__PURE__*/_react["default"].createElement(SourceDataSelector, {
      inputTheme: "secondary",
      datasets: datasets,
      disabled: filter.freeze,
      dataId: filter.dataId,
      onSelect: onSourceDataSelector
    })));
  });

  NewFilterPanel.displayName = 'NewFilterPanel';
  return NewFilterPanel;
}

var _default = NewFilterPanelFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2ZpbHRlcnMvZmlsdGVyLXBhbmVscy9uZXctZmlsdGVyLXBhbmVsLmpzIl0sIm5hbWVzIjpbIk5ld0ZpbHRlclBhbmVsRmFjdG9yeSIsImRlcHMiLCJGaWx0ZXJQYW5lbEhlYWRlckZhY3RvcnkiLCJTb3VyY2VEYXRhU2VsZWN0b3JGYWN0b3J5IiwiRmlsdGVyUGFuZWxIZWFkZXIiLCJTb3VyY2VEYXRhU2VsZWN0b3IiLCJOZXdGaWx0ZXJQYW5lbCIsIlJlYWN0IiwibWVtbyIsImlkeCIsImZpbHRlciIsImRhdGFzZXRzIiwiYWxsQXZhaWxhYmxlRmllbGRzIiwic2V0RmlsdGVyIiwicmVtb3ZlRmlsdGVyIiwiZW5sYXJnZUZpbHRlciIsIm9uRmllbGRTZWxlY3RvciIsImZpZWxkIiwibmFtZSIsIm9uU291cmNlRGF0YVNlbGVjdG9yIiwidmFsdWUiLCJkYXRhSWQiLCJlbmxhcmdlZCIsIkFycmF5IiwiaXNBcnJheSIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJmcmVlemUiLCJkaXNwbGF5TmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUFBLHFCQUFxQixDQUFDQyxJQUF0QixHQUE2QixDQUFDQyw2QkFBRCxFQUEyQkMsOEJBQTNCLENBQTdCOztBQUVBLFNBQVNILHFCQUFULENBQStCSSxpQkFBL0IsRUFBa0RDLGtCQUFsRCxFQUFzRTtBQUNwRSxNQUFNQyxjQUFjLEdBQUdDLGtCQUFNQyxJQUFOLENBQ3JCLGdCQUF5RjtBQUFBLFFBQXZGQyxHQUF1RixRQUF2RkEsR0FBdUY7QUFBQSxRQUFsRkMsTUFBa0YsUUFBbEZBLE1BQWtGO0FBQUEsUUFBMUVDLFFBQTBFLFFBQTFFQSxRQUEwRTtBQUFBLFFBQWhFQyxrQkFBZ0UsUUFBaEVBLGtCQUFnRTtBQUFBLFFBQTVDQyxTQUE0QyxRQUE1Q0EsU0FBNEM7QUFBQSxRQUFqQ0MsWUFBaUMsUUFBakNBLFlBQWlDO0FBQUEsUUFBbkJDLGFBQW1CLFFBQW5CQSxhQUFtQjtBQUN2RixRQUFNQyxlQUFlLEdBQUcsd0JBQVksVUFBQUMsS0FBSztBQUFBLGFBQUlKLFNBQVMsQ0FBQ0osR0FBRCxFQUFNLE1BQU4sRUFBY1EsS0FBSyxDQUFDQyxJQUFwQixDQUFiO0FBQUEsS0FBakIsRUFBeUQsQ0FDL0VULEdBRCtFLEVBRS9FSSxTQUYrRSxDQUF6RCxDQUF4QjtBQUtBLFFBQU1NLG9CQUFvQixHQUFHLHdCQUFZLFVBQUFDLEtBQUs7QUFBQSxhQUFJUCxTQUFTLENBQUNKLEdBQUQsRUFBTSxRQUFOLEVBQWdCVyxLQUFoQixDQUFiO0FBQUEsS0FBakIsRUFBc0QsQ0FDakZYLEdBRGlGLEVBRWpGSSxTQUZpRixDQUF0RCxDQUE3QjtBQUtBLHdCQUNFLCtFQUNFLGdDQUFDLGlCQUFEO0FBQ0UsTUFBQSxRQUFRLEVBQUUsQ0FBQ0YsUUFBUSxDQUFDRCxNQUFNLENBQUNXLE1BQVAsQ0FBYyxDQUFkLENBQUQsQ0FBVCxDQURaO0FBRUUsTUFBQSxrQkFBa0IsRUFBRVQsa0JBRnRCO0FBR0UsTUFBQSxHQUFHLEVBQUVILEdBSFA7QUFJRSxNQUFBLE1BQU0sRUFBRUMsTUFKVjtBQUtFLE1BQUEsWUFBWSxFQUFFSSxZQUxoQjtBQU1FLE1BQUEsYUFBYSxFQUFFQyxhQU5qQjtBQU9FLE1BQUEsUUFBUSxFQUFFTCxNQUFNLENBQUNZO0FBUG5CLG9CQVNFLGdDQUFDLHlCQUFEO0FBQ0UsTUFBQSxVQUFVLEVBQUMsV0FEYjtBQUVFLE1BQUEsTUFBTSxFQUFFVixrQkFGVjtBQUdFLE1BQUEsS0FBSyxFQUFFVyxLQUFLLENBQUNDLE9BQU4sQ0FBY2QsTUFBTSxDQUFDUSxJQUFyQixJQUE2QlIsTUFBTSxDQUFDUSxJQUFQLENBQVksQ0FBWixDQUE3QixHQUE4Q1IsTUFBTSxDQUFDUSxJQUg5RDtBQUlFLE1BQUEsUUFBUSxFQUFFLEtBSlo7QUFLRSxNQUFBLFFBQVEsRUFBRUY7QUFMWixNQVRGLENBREYsZUFrQkUsZ0NBQUMscUNBQUQ7QUFBcUIsTUFBQSxTQUFTLEVBQUM7QUFBL0IsT0FDR1MsTUFBTSxDQUFDQyxJQUFQLENBQVlmLFFBQVosRUFBc0JnQixNQUF0QixHQUErQixDQUEvQixpQkFDQyxnQ0FBQyxrQkFBRDtBQUNFLE1BQUEsVUFBVSxFQUFDLFdBRGI7QUFFRSxNQUFBLFFBQVEsRUFBRWhCLFFBRlo7QUFHRSxNQUFBLFFBQVEsRUFBRUQsTUFBTSxDQUFDa0IsTUFIbkI7QUFJRSxNQUFBLE1BQU0sRUFBRWxCLE1BQU0sQ0FBQ1csTUFKakI7QUFLRSxNQUFBLFFBQVEsRUFBRUY7QUFMWixNQUZKLENBbEJGLENBREY7QUFnQ0QsR0E1Q29CLENBQXZCOztBQStDQWIsRUFBQUEsY0FBYyxDQUFDdUIsV0FBZixHQUE2QixnQkFBN0I7QUFFQSxTQUFPdkIsY0FBUDtBQUNEOztlQUVjTixxQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBSZWFjdCwge3VzZUNhbGxiYWNrfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7U3R5bGVkRmlsdGVyQ29udGVudH0gZnJvbSAnY29tcG9uZW50cy9jb21tb24vc3R5bGVkLWNvbXBvbmVudHMnO1xyXG5pbXBvcnQgRmlsdGVyUGFuZWxIZWFkZXJGYWN0b3J5IGZyb20gJ2NvbXBvbmVudHMvc2lkZS1wYW5lbC9maWx0ZXItcGFuZWwvZmlsdGVyLXBhbmVsLWhlYWRlcic7XHJcbmltcG9ydCBGaWVsZFNlbGVjdG9yIGZyb20gJ2NvbXBvbmVudHMvY29tbW9uL2ZpZWxkLXNlbGVjdG9yJztcclxuaW1wb3J0IFNvdXJjZURhdGFTZWxlY3RvckZhY3RvcnkgZnJvbSAnY29tcG9uZW50cy9zaWRlLXBhbmVsL2NvbW1vbi9zb3VyY2UtZGF0YS1zZWxlY3Rvcic7XHJcblxyXG5OZXdGaWx0ZXJQYW5lbEZhY3RvcnkuZGVwcyA9IFtGaWx0ZXJQYW5lbEhlYWRlckZhY3RvcnksIFNvdXJjZURhdGFTZWxlY3RvckZhY3RvcnldO1xyXG5cclxuZnVuY3Rpb24gTmV3RmlsdGVyUGFuZWxGYWN0b3J5KEZpbHRlclBhbmVsSGVhZGVyLCBTb3VyY2VEYXRhU2VsZWN0b3IpIHtcclxuICBjb25zdCBOZXdGaWx0ZXJQYW5lbCA9IFJlYWN0Lm1lbW8oXHJcbiAgICAoe2lkeCwgZmlsdGVyLCBkYXRhc2V0cywgYWxsQXZhaWxhYmxlRmllbGRzLCBzZXRGaWx0ZXIsIHJlbW92ZUZpbHRlciwgZW5sYXJnZUZpbHRlcn0pID0+IHtcclxuICAgICAgY29uc3Qgb25GaWVsZFNlbGVjdG9yID0gdXNlQ2FsbGJhY2soZmllbGQgPT4gc2V0RmlsdGVyKGlkeCwgJ25hbWUnLCBmaWVsZC5uYW1lKSwgW1xyXG4gICAgICAgIGlkeCxcclxuICAgICAgICBzZXRGaWx0ZXJcclxuICAgICAgXSk7XHJcblxyXG4gICAgICBjb25zdCBvblNvdXJjZURhdGFTZWxlY3RvciA9IHVzZUNhbGxiYWNrKHZhbHVlID0+IHNldEZpbHRlcihpZHgsICdkYXRhSWQnLCB2YWx1ZSksIFtcclxuICAgICAgICBpZHgsXHJcbiAgICAgICAgc2V0RmlsdGVyXHJcbiAgICAgIF0pO1xyXG5cclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgPEZpbHRlclBhbmVsSGVhZGVyXHJcbiAgICAgICAgICAgIGRhdGFzZXRzPXtbZGF0YXNldHNbZmlsdGVyLmRhdGFJZFswXV1dfVxyXG4gICAgICAgICAgICBhbGxBdmFpbGFibGVGaWVsZHM9e2FsbEF2YWlsYWJsZUZpZWxkc31cclxuICAgICAgICAgICAgaWR4PXtpZHh9XHJcbiAgICAgICAgICAgIGZpbHRlcj17ZmlsdGVyfVxyXG4gICAgICAgICAgICByZW1vdmVGaWx0ZXI9e3JlbW92ZUZpbHRlcn1cclxuICAgICAgICAgICAgZW5sYXJnZUZpbHRlcj17ZW5sYXJnZUZpbHRlcn1cclxuICAgICAgICAgICAgZW5sYXJnZWQ9e2ZpbHRlci5lbmxhcmdlZH1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPEZpZWxkU2VsZWN0b3JcclxuICAgICAgICAgICAgICBpbnB1dFRoZW1lPVwic2Vjb25kYXJ5XCJcclxuICAgICAgICAgICAgICBmaWVsZHM9e2FsbEF2YWlsYWJsZUZpZWxkc31cclxuICAgICAgICAgICAgICB2YWx1ZT17QXJyYXkuaXNBcnJheShmaWx0ZXIubmFtZSkgPyBmaWx0ZXIubmFtZVswXSA6IGZpbHRlci5uYW1lfVxyXG4gICAgICAgICAgICAgIGVyYXNhYmxlPXtmYWxzZX1cclxuICAgICAgICAgICAgICBvblNlbGVjdD17b25GaWVsZFNlbGVjdG9yfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgPC9GaWx0ZXJQYW5lbEhlYWRlcj5cclxuICAgICAgICAgIDxTdHlsZWRGaWx0ZXJDb250ZW50IGNsYXNzTmFtZT1cImZpbHRlci1wYW5lbF9fY29udGVudFwiPlxyXG4gICAgICAgICAgICB7T2JqZWN0LmtleXMoZGF0YXNldHMpLmxlbmd0aCA+IDEgJiYgKFxyXG4gICAgICAgICAgICAgIDxTb3VyY2VEYXRhU2VsZWN0b3JcclxuICAgICAgICAgICAgICAgIGlucHV0VGhlbWU9XCJzZWNvbmRhcnlcIlxyXG4gICAgICAgICAgICAgICAgZGF0YXNldHM9e2RhdGFzZXRzfVxyXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2ZpbHRlci5mcmVlemV9XHJcbiAgICAgICAgICAgICAgICBkYXRhSWQ9e2ZpbHRlci5kYXRhSWR9XHJcbiAgICAgICAgICAgICAgICBvblNlbGVjdD17b25Tb3VyY2VEYXRhU2VsZWN0b3J9XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICAgIDwvU3R5bGVkRmlsdGVyQ29udGVudD5cclxuICAgICAgICA8Lz5cclxuICAgICAgKTtcclxuICAgIH1cclxuICApO1xyXG5cclxuICBOZXdGaWx0ZXJQYW5lbC5kaXNwbGF5TmFtZSA9ICdOZXdGaWx0ZXJQYW5lbCc7XHJcblxyXG4gIHJldHVybiBOZXdGaWx0ZXJQYW5lbDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTmV3RmlsdGVyUGFuZWxGYWN0b3J5O1xyXG4iXX0=