"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readFile = readFile;
exports.getFileHandler = getFileHandler;
exports.getFileType = getFileType;
exports.loadCsv = loadCsv;
exports.loadJSON = loadJSON;
exports.readJSONFile = readJSONFile;
exports.isGeoJson = isGeoJson;
exports.isFeature = isFeature;
exports.isFeatureCollection = isFeatureCollection;
exports.isRowObject = isRowObject;
exports.isKeplerGlMap = isKeplerGlMap;
exports.determineJsonProcess = determineJsonProcess;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _window = require("global/window");

var _console = _interopRequireDefault(require("global/console"));

var _dataProcessor = require("./data-processor");

var _utils = require("../utils/utils");

var _defaultSettings = require("../constants/default-settings");

// Copyright (c) 2020 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var FILE_HANDLERS = {
  csv: loadCsv,
  json: loadJSON
};

function readFile(_ref) {
  var file = _ref.file,
      _ref$fileCache = _ref.fileCache,
      fileCache = _ref$fileCache === void 0 ? [] : _ref$fileCache;
  return new Promise(function (resolve, reject) {
    var _getFileHandler = getFileHandler(file),
        handler = _getFileHandler.handler,
        format = _getFileHandler.format;
    /*    if (!handler) {
          Console.warn(
            `Canont determine file handler for file ${file.name}. It must have a valid file extension`
          );
          resolve(fileCache);
        }
    */


    handler({
      file: file,
      format: format
    }).then(function (result) {
      if (!result || !result.data) {
        // return fileCache, to keep process other files
        resolve(fileCache);
      }

      resolve([].concat((0, _toConsumableArray2["default"])(fileCache), [{
        data: result.data,
        info: {
          label: file.name,
          format: result.format
        }
      }]));
    });
  });
}

function getFileHandler(fileBlob) {
  var type = getFileType(fileBlob.name);
  return {
    handler: FILE_HANDLERS[type],
    format: type
  };
}

function getFileType(filename) {
  if (filename.endsWith('csv')) {
    return 'csv';
  } else if (filename.endsWith('json') || filename.endsWith('geojson')) {
    // Read GeoJson from browser
    return 'json';
  } else {
    return 'csv';
  } // Wait to add other file type handler


  return 'other';
}

function readCSVFile(fileBlob) {
  return new Promise(function (resolve, reject) {
    var fileReader = new _window.FileReader();

    fileReader.onload = function (_ref2) {
      var result = _ref2.target.result;
      resolve(result);
    };

    fileReader.readAsText(fileBlob);
  });
}

function loadCsv(_ref3) {
  var file = _ref3.file,
      format = _ref3.format,
      _ref3$processor = _ref3.processor,
      processor = _ref3$processor === void 0 ? _dataProcessor.processCsvData : _ref3$processor;
  return readCSVFile(file).then(function (rawData) {
    return rawData ? {
      data: processor(rawData),
      format: format
    } : null;
  });
}

function loadJSON(_ref4) {
  var file = _ref4.file,
      _ref4$processor = _ref4.processor,
      processor = _ref4$processor === void 0 ? _dataProcessor.processGeojson : _ref4$processor;
  return readJSONFile(file).then(function (content) {
    if (isKeplerGlMap(content)) {
      return {
        format: _defaultSettings.DATASET_FORMATS.keplergl,
        data: (0, _dataProcessor.processKeplerglJSON)(content)
      };
    } else if (isRowObject(content)) {
      return {
        format: _defaultSettings.DATASET_FORMATS.row,
        data: (0, _dataProcessor.processRowObject)(content)
      };
    } else if (isGeoJson(content)) {
      return {
        format: _defaultSettings.DATASET_FORMATS.geojson,
        data: (0, _dataProcessor.processGeojson)(content)
      };
    } // unsupported json format


    _console["default"].warn("unsupported Json format ".concat(file.name));

    return null;
  });
}

function readJSONFile(fileBlob) {
  return new Promise(function (resolve, reject) {
    var fileReader = new _window.FileReader();

    fileReader.onload = function (_ref5) {
      var result = _ref5.target.result;

      try {
        var json = JSON.parse(result);
        resolve(json);
      } catch (err) {
        reject(null);
      }
    };

    fileReader.readAsText(fileBlob, 'UTF-8');
  });
}

function isGeoJson(json) {
  // json can be feature collection
  // or simgle feature
  return (0, _utils.isPlainObject)(json) && (isFeature(json) || isFeatureCollection(json));
}

function isFeature(json) {
  return json.type === 'Feature' && json.geometry;
}

function isFeatureCollection(json) {
  return json.type === 'FeatureCollection' && json.features;
}

function isRowObject(json) {
  return Array.isArray(json) && (0, _utils.isPlainObject)(json[0]);
}

function isKeplerGlMap(json) {
  return (0, _utils.isPlainObject)(json) && json.datasets && json.config && json.info && json.info.app === 'kepler.gl';
}

function determineJsonProcess(_ref6, defaultProcessor) {
  var dataset = _ref6.dataset,
      format = _ref6.format;

  if (isKeplerGlMap(dataset)) {
    return _dataProcessor.processKeplerglJSON;
  }

  return defaultProcessor;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,